[HttpPost]
[Route("findandreplace")]
public async Task<IActionResult> FindandReplace(string findText, string replaceText)
{
    if (string.IsNullOrEmpty(findText) || string.IsNullOrEmpty(replaceText))
    {
        return BadRequest("Invalid parameters.");
    }

    var connectionString = _connectionString; // Replace with your actual connection string
    var tableName = "employee_info"; // Table name is fixed
    var databaseName = "database1"; // Database name is fixed

    var query = new StringBuilder();
    var updateStatements = new List<string>();

    using (var connection = new MySqlConnection(connectionString))
    {
        await connection.OpenAsync();

        // Fetch the columns for the specified table
        var columnsQuery = @"SELECT COLUMN_NAME 
                             FROM INFORMATION_SCHEMA.COLUMNS 
                             WHERE TABLE_NAME = @TableName 
                             AND TABLE_SCHEMA = @DatabaseName 
                             AND DATA_TYPE IN ('varchar', 'char', 'text', 'nvarchar', 'nchar', 'ntext')";

        var columns = await connection.QueryAsync<string>(columnsQuery, new { TableName = tableName, DatabaseName = databaseName });

        if (columns.Any())
        {
            // Construct the SET clause for the UPDATE statement
            foreach (var column in columns)
            {
                updateStatements.Add($"{column} = REPLACE({column}, @FindText, @ReplaceText)");
            }

            // Construct the final UPDATE statement
            query.Append($"UPDATE {tableName} SET ");
            query.Append(string.Join(", ", updateStatements));
            query.Append($" WHERE {string.Join(" OR ", columns.Select(c => $"{c} LIKE @FindText"))}");

            // Execute the dynamically constructed SQL
            var parameters = new { FindText = $"%{findText}%", ReplaceText = replaceText };
            var result = await connection.ExecuteAsync(query.ToString(), parameters);

            return Ok(new { RowsAffected = result });
        }
        else
        {
            return NotFound("No columns found for the specified table.");
        }
    }
}
